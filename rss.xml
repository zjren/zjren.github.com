<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>蓦然回首</title>
    <link>http://rzj.me</link>
    <pubDate>2013-08-11 12:53:30 +0800</pubDate>
    <item>
      <title>ubuntu下屏蔽youku广告</title>
      <link>http://rzj.me/blog/2013/08/how-to-block-youku-ads-under-ubuntu.html</link>
      <pubDate>2013-08-11 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;今天你发现一个屏蔽youku广告的方法，mark一下&lt;/p&gt;

&lt;p&gt;编辑系统下的/etc/hosts文件，添加以下记录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1       atm.youku.com
127.0.0.1       fvid.atm.youku.com
127.0.0.1       html.atm.youku.com
127.0.0.1       valb.atm.youku.com
127.0.0.1       valc.atm.youku.com
127.0.0.1       valf.atm.youku.com
127.0.0.1       valo.atm.youku.com
127.0.0.1       valp.atm.youku.com
127.0.0.1       vid.atm.youku.com
127.0.0.1       walp.atm.youku.com
127.0.0.1       lstat.youku.com
127.0.0.1       speed.lstat.youku.com
127.0.0.1       static.lstat.youku.com
127.0.0.1       urchin.lstat.youku.com
127.0.0.1       stat.youku.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加完后，测试广告已经被屏蔽，但是&lt;a href=&#34;http://blogread.cn/it/article/6189&#34; title=&#34;彻底屏蔽优酷广告&#34;&gt;原文&lt;/a&gt;分了两步来设置，但是我用的是chromium,没有找到第二部中提到的文件，但是仍然可用，不知为何。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;本文使用 &lt;a href=&#34;http://ghosertblog.github.io/mdeditor/&#34; title=&#34;中文在线 Markdown 编辑器&#34;&gt;Cmd&lt;/a&gt; 编写&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>后缀表达式求值</title>
      <link>http://rzj.me/blog/2013/04/ten-data-struct-of-postfix-expression.html</link>
      <pubDate>2013-04-23 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;strong&gt;后缀表达式求值&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;题目：后缀表达式求值。&lt;br /&gt;
要求：输入后缀表达式，输入为整数和四则运算，输出计算结果。&lt;br /&gt;
例如：&lt;br /&gt;
输入：2 3 * 1 -&lt;br /&gt;
输出：5&lt;br /&gt;
分析：2*3-1=5&lt;/p&gt;

&lt;p&gt;输入：1 2 + 5 4 * 3 - * 6 -&lt;br /&gt;
输出：45&lt;br /&gt;
分析：（1+2）*（5*4-3）-6=45&lt;/p&gt;

&lt;p&gt;算法分析：&lt;br /&gt;
后缀表达式相对于普通的表达式来说，其优点在于不需要括号。所以方便的计算机的处理，通常对于后缀表达式才用栈的数据结构来实现，从左往右扫描表达式，如果遇到的是数字，则把数字压入栈中；若遇到的是运算符号，则提取栈的的2个元素进行计算，将计算结果压栈，若最后栈内只剩下一个数字，这就是后缀表达式的计算结果。&lt;/p&gt;

&lt;p&gt;代码实现：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PHP版&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//获取后缀表达式的值
function getPostfixExpValue($input)
{
    $stack = array();

    $arr = explode(&amp;quot; &amp;quot;,$input);
    $len = sizeof($arr);
    if($len&amp;lt;3){
        return &amp;quot;错误的表达式&amp;quot;;        
    }
    for($i=0;$i&amp;lt;$len;$i++){
        if(is_numeric($arr[$i])){
            $stack[] = $arr[$i];   
        }else if($i&amp;lt;2 || !in_array($arr[$i],array(&amp;quot;+&amp;quot;,&amp;quot;-&amp;quot;,&amp;quot;*&amp;quot;,&amp;quot;/&amp;quot;,&amp;quot;%&amp;quot;))){
            return &amp;quot;错误的表达式&amp;quot;;
        }
        else{
            $out1 = array_pop($stack);
            $out2 = array_pop($stack);
            if(!is_numeric($out1) &amp;amp;&amp;amp; !is_numeric($out2)){
                return &amp;quot;错误的表达式&amp;quot;;
            }

            $str = $out1.$arr[$i].$out2;
            eval(&amp;quot;\$res=&amp;quot;.$out2.$arr[$i].$out1.&amp;quot;;&amp;quot;);
            $stack[] = $res;
        }
    }
    return array_pop($stack);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Golang版&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;errors&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;regexp&amp;quot;
    &amp;quot;strconv&amp;quot;
    &amp;quot;strings&amp;quot;
)

func GetPostfixExpValue(str string) (res int, err error) {

    _, err = regexp.MatchString(&amp;quot;^((\\d+|[+*\\/%-])\\s){2,}([+*\\/%-])$&amp;quot;, str)
    if err != nil {
        return 0, err
    }

    arr := strings.Split(str, &amp;quot; &amp;quot;)
    stack := make(map[int]int)
    for _, val := range arr {

        ok, _ := regexp.MatchString(&amp;quot;^\\d+$&amp;quot;, val)
        if ok {
            stack[len(stack)], err = strconv.Atoi(val)
            if err != nil {
                return 0, nil
            }
            continue
        }
        _, err := regexp.MatchString(&amp;quot;^[+*/%-]$&amp;quot;, val)
        if err != nil {
            return 0, err
        }

        num1 := stack[len(stack)-1]
        num2 := stack[len(stack)-2]
        var res int
        switch val {
        case &amp;quot;+&amp;quot;:
            res = num1 + num2
        case &amp;quot;-&amp;quot;:
            res = num2 - num1
        case &amp;quot;*&amp;quot;:
            res = num2 * num1
        case &amp;quot;/&amp;quot;:
            res = num2 / num1
        case &amp;quot;%&amp;quot;:
            res = num2 % num1
        default:
            res = 0
        }
        delete(stack, len(stack)-1)
        stack[len(stack)-1] = res
    }
    if len(stack) &amp;gt; 1 {
        return 0, errors.New(&amp;quot;表达式错误&amp;quot;)
    }
    total := stack[0]
    return total, nil
}

func main() {
    str := &amp;quot;10 2 * 8 + 9 - 5 %&amp;quot;

    result, err := GetPostfixExpValue(str)
    if err != nil {
        fmt.Println(err)
    } else {
        fmt.Println(result)
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码比较粗糙，欢迎批评指正~~&lt;/p&gt;
</description>
    </item>
    <item>
      <title>PHP5对象与数组序列化</title>
      <link>http://rzj.me/blog/2013/04/php5-object-and-array-serialize-diffrence.html</link>
      <pubDate>2013-04-23 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class person{
    public $name;
    public $gender;
    public function say(){
     echo $this-&amp;gt;name ,&amp;quot; is a &amp;quot;,$gender;
    }
}

class family {
    public $people;
    public $location;
    public function __construct($p,$loc){
        $this-&amp;gt;people = $p;
        $this-&amp;gt;location = $loc;
    }
}

$student = new person();
$student-&amp;gt;name=&amp;quot;lilei&amp;quot;;
$student-&amp;gt;gender=&amp;quot;male&amp;quot;;

$tom = new family($student,&amp;quot;beijing&amp;quot;);

echo serialize($student);
echo &amp;quot;\n&amp;quot;;

$student_arr = array(&amp;quot;name&amp;quot;=&amp;gt;&amp;quot;lilei&amp;quot;,&amp;quot;gender&amp;quot;=&amp;gt;&amp;quot;male&amp;quot;);
echo serialize($student_arr);

print_r($tom);
echo &amp;quot;\n&amp;quot;;
echo serialize($tom);

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出如下结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;O:6:&amp;quot;person&amp;quot;:2:{s:4:&amp;quot;name&amp;quot;;s:5:&amp;quot;lilei&amp;quot;;s:6:&amp;quot;gender&amp;quot;;s:4:&amp;quot;male&amp;quot;;}
a:2:{s:4:&amp;quot;name&amp;quot;;s:5:&amp;quot;lilei&amp;quot;;s:6:&amp;quot;gender&amp;quot;;s:4:&amp;quot;male&amp;quot;;}family Object
(
    [people] =&amp;gt; person Object
        (
            [name] =&amp;gt; lilei
            [gender] =&amp;gt; male
        )

    [location] =&amp;gt; beijing
)

O:6:&amp;quot;family&amp;quot;:2:{s:6:&amp;quot;people&amp;quot;;O:6:&amp;quot;person&amp;quot;:2:{s:4:&amp;quot;name&amp;quot;;s:5:&amp;quot;lilei&amp;quot;;s:6:&amp;quot;gender&amp;quot;;s:4:&amp;quot;male&amp;quot;;}s:8:&amp;quot;location&amp;quot;;s:7:&amp;quot;beijing&amp;quot;;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出对象与数组序列化的区别：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对象首字母为o,数组为a，分别是object和array的首字母&lt;/li&gt;
&lt;li&gt;序列化的对象会附带所属的类名&lt;/li&gt;
&lt;li&gt;当一个对象的实例变量引用其他对象时，序列化该对象时也会对引用对象进行序列化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;ndash;摘自&lt;a href=&#34;http://book.douban.com/subject/20370984/&#34;&gt;《PHP核心技术与最佳实践》&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>PHP5对象与类</title>
      <link>http://rzj.me/blog/2013/04/php5-object-and-class.html</link>
      <pubDate>2013-04-23 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;strong&gt;对象的“形”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;类是我们对一组对象的描述&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;类定义了一系列的属性和方法，并提供了实际的操作方法，这些方法可以用来对属性进行加工&lt;/li&gt;
&lt;li&gt;对象含有类属性的具体值，这就是类的实例化。正是由于属性的不同，才能区分不同的对象。&lt;/li&gt;
&lt;li&gt;类与对象的关系似一种服务与被服务、加工与被加工的关系，具体而言，就如同原材料与流水线的关系。只需要再对象中调用类中存在的方法，就可以对类的属性进行加工，并展示其功能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;对象的“本”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在PHP5中，对象在底层的实现是采取“属性数组 + 方法数组”来实现的。&lt;/p&gt;

&lt;p&gt;用map数组展示一下对象的组成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object = array(
    &amp;quot;属性数组&amp;quot;
    “类指针”=&amp;gt;array(
        &amp;quot;类属性&amp;quot;
        “静态属性”
        “类常量”
        “标准方法”
        “魔术方法”
        ”自定义方法表“
    )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对象在PHP中是使用一种zend_object_value 结构体存储的，他的定义如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct _zend_object {
    zend_class_entry * ce; //类入口
    HashTable *properties; //属性组成的HashTable
    HashTable *guards; //阻止递归调用
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;对象与类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PHP语言中对象与类的概念与两者之间的关系&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;类是定义一系列属性和操作的模板，而对象则把属性进行具体化，然后交由类来处理&lt;/li&gt;
&lt;li&gt;对象就是数据，对象本身不包含方法。但是对象有一个“指针” 指向一个类，这个类里可以有方法。&lt;/li&gt;
&lt;li&gt;方法描述不同属性所导致的不同表现&lt;/li&gt;
&lt;li&gt;类和对象是不可分割的，有对象必有一个类和其对应，否则这个对象也就成了没有娘的孩子（有一个特殊情况，就是由标量进行强制类型转换的object，没有一个类与它对应。此事，PHP中一个称为“孤儿”的stdClass类就会收留这个对象）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;ndash;摘自&lt;a href=&#34;http://book.douban.com/subject/20370984/&#34;&gt;《PHP核心技术与最佳实践》&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>十大常用数据结构</title>
      <link>http://rzj.me/blog/2013/04/ten-shujujiegou.html</link>
      <pubDate>2013-04-18 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;一直以来都是做web开发，对数据结构和算法研究不多。为了弥补自己在算法上的短板，特意从网上摘录了别人总结的十个常用数据结构，决定用10周左右的时间用go语言来实现这些算法（为什么是go呢？因为我正在学习go，顺便用来练练手，嘿嘿）。&lt;/p&gt;

&lt;p&gt;一、栈：&lt;br /&gt;
1、后缀表达式的求值；&lt;br /&gt;
2、中缀到后缀表达式的转换；&lt;br /&gt;
3、深度优先搜索的非递归实现；&lt;br /&gt;
4、动态规划的优化：用于维护一个凸序列，便于二分查找，如LIS问题的O(nlgn)算法。&lt;/p&gt;

&lt;p&gt;二、队列：&lt;br /&gt;
1、树的层序遍历；&lt;br /&gt;
2、广度优先搜索；&lt;br /&gt;
3、Bellman-Ford算法的SPFA实现；&lt;br /&gt;
4、网络流中FF算法的Edmonds-Karp实现，以及Preflow算法的队列优化实现。&lt;/p&gt;

&lt;p&gt;三、二叉搜索树：&lt;br /&gt;
1、对大量的关键字的索引查找；&lt;br /&gt;
2、有很多平衡策略以改善其平均性能：&lt;br /&gt;
常用平衡树：AVL，红黑树，随机化BST，Splay Tree，Treap（或叫笛卡儿树）。&lt;/p&gt;

&lt;p&gt;四、散列表（hash表）：&lt;br /&gt;
1、一般针对值域较大但状态很稀疏的应用，比如状态压缩记忆化搜索；&lt;br /&gt;
2、实现映射功能。&lt;/p&gt;

&lt;p&gt;五、检索树（Trie）：&lt;br /&gt;
1、一般用于字符串索引算法，速度快，但占用空间较大（相对hash）；&lt;br /&gt;
2、常用的改进结构：Patricia线索树，多叉检索树（TST）。&lt;/p&gt;

&lt;p&gt;六、优先队列：&lt;br /&gt;
1、常用的是二叉堆的实现，具体应用如堆排序和Dijkstra算法；&lt;br /&gt;
2、当需要快速合并两个优先队列时，常用二项式队列，实现简单。&lt;br /&gt;
3、注意最大最小堆的配对使用。&lt;/p&gt;

&lt;p&gt;七、线段树和树状数组：&lt;br /&gt;
1、两者都可以用于离散对象的统计；&lt;br /&gt;
2、后者的步进函数的性质和应用值得注意；&lt;br /&gt;
3、前者基本上适用于任何的区间操作，如求区间最值，改变区间的值等。&lt;br /&gt;
4、线段树还可以用于优化状态的枚举，经常和动态规划结合。&lt;/p&gt;

&lt;p&gt;八、后缀树与后缀数组：&lt;br /&gt;
1、总体规律是两者的实现都比较复杂，前者更甚，但是前者的功能也更强大；&lt;br /&gt;
2、几乎可以解决所有常见的关于字符串的算法，如最长回文子串，最长重复子串，以及很多的模式匹配问题。&lt;/p&gt;

&lt;p&gt;九、并查集：&lt;br /&gt;
1、解决无向图的连通性问题，如用于Kruskal算法；&lt;br /&gt;
2、解决等价关系的查询（这是它的主要用武之地），如05年Baidu之星初赛的石头剪子布游戏；&lt;br /&gt;
3、优点是实现异常简单，缺点是合并后无法分离，若需要可以选择用动态树。&lt;/p&gt;

&lt;p&gt;十、邻接表和边表：&lt;br /&gt;
1、表示图的最直接的方法；&lt;br /&gt;
2、后者更省空间，并且在一定程度上更好用，比如Bellman-Ford算法。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Go语言实现的短网址算法</title>
      <link>http://rzj.me/blog/2013/03/golang-shorturl.html</link>
      <pubDate>2013-03-28 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;一直想做个自己的短网址服务，现在刚好在学习go语言，所以就决定用go来写这个应用练练手。&lt;/p&gt;

&lt;p&gt;看了网上很多短网址算法，比较著名的算法要数10进制与62进制转换算法，转换步骤如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;准备一个数组，存放a-zA-Z0-9这62个字符&lt;/li&gt;
&lt;li&gt;自定义网址前后缀，然后连接成一个字符串并进行md5加密，生成32位的签名串&lt;/li&gt;
&lt;li&gt;将长网址md5生成32位签名串,分为4段, 每段8个字节;&lt;/li&gt;
&lt;li&gt;对这四段循环处理, 取8个字节, 将他看成16进制串与0x3fffffff(30位1)与操作, 即超过30位的忽略处理;&lt;/li&gt;
&lt;li&gt;这30位分成6段, 每5位的数字作为字母表的索引取得特定字符, 依次进行获得6位字符串;&lt;/li&gt;
&lt;li&gt;总的md5串可以获得4个6位串; 取里面的任意一个就可作为这个长url的短url地址;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func ShortUrl(url string, prefix string, suffix string) [4]string {

    str := prefix + url + suffix

    chars := [62]byte{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;,
        &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;,
        &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;,
        &#39;y&#39;, &#39;z&#39;, &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;,
        &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;,
        &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;,
        &#39;M&#39;, &#39;N&#39;, &#39;O&#39;, &#39;P&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;T&#39;,
        &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;}

    md5str := Md5Encode(str)
    hexstr := []byte(md5str)

    var resUrl [4]string

    for i := 0; i &amp;lt; 4; i++ {
        j := i * 8
        k := j + 8
        s := &amp;quot;0x&amp;quot; + string(hexstr[j:k])
        hexInt, _ := strconv.ParseInt(s, 0, 64)
        hexInt = 0x3FFFFFFF &amp;amp; hexInt

        var outChars string = &amp;quot;&amp;quot;
        for n := 0; n &amp;lt; 6; n++ {
                    index := 0x0000003D &amp;amp; hexInt
                    outChars = outChars + string(chars[index])
                    hexInt = hexInt &amp;gt;&amp;gt; 5
                }
        resUrl[i] = outChars
    }
    return resUrl
}

func Md5Encode(str string) string {
    h := md5.New()
    io.WriteString(h, str)
    buffer := bytes.NewBuffer(nil)
    fmt.Fprintf(buffer, &amp;quot;%x&amp;quot;, h.Sum(nil))
    return buffer.String()
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Mysql基本sql语句优化的10个原则</title>
      <link>http://rzj.me/blog/2013/03/ten-mysql-sql-optimize-rules.html</link>
      <pubDate>2013-03-21 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Mysql基本sql语句优化的10个原则&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;尽量避免在列上进行运算，这样会导致索引失效。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;例如原句为：&lt;br /&gt;
select * from t where YEAR(d)&amp;gt;=2011;&lt;br /&gt;
优化为：&lt;br /&gt;
select * from t where d&amp;gt;=&amp;lsquo;2011-01-01&amp;rsquo;;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用JOIN时，因该用小结果集驱动大结果集，同时把复杂的JOIN拆分成多个Query。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;注意LIKE模糊查询的使用，避免%%&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;例如原句为：&lt;br /&gt;
select * from t where name like &amp;lsquo;%de%&amp;rsquo;&lt;br /&gt;
优化位：&lt;br /&gt;
select * from t where name&amp;gt;=&amp;lsquo;de&amp;rsquo; and name&amp;lt;&amp;lsquo;df&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;仅列出需要查询的字段，这里主要考虑节省内存&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用批量插入语句节省交互&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Limit的基数比较大时使用Between&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不要使用rand函数获取多条随机记录&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;避免使用NULL&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不要使用count(id),而应该是count(*)&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;任何情况下SELECT COUNT(*) FROM tablename是最优选择；&lt;/li&gt;
&lt;li&gt;尽量减少SELECT COUNT(*) FROM tablename WHERE COL = &amp;lsquo;value’ 这种查询；&lt;/li&gt;
&lt;li&gt;杜绝SELECT COUNT(COL) FROM tablename的出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不要做无谓的排序操作，尽可能在索引中完成排序&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;ndash;摘自&lt;a href=&#34;http://book.douban.com/subject/20370984/&#34;&gt;《PHP核心技术与最佳实践》&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Mysql索引建立和使用的基本原则</title>
      <link>http://rzj.me/blog/2013/03/the-way-to-build-and-use-mysql-index.html</link>
      <pubDate>2013-03-20 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Mysql索引建立和使用的基本原则&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;合理设计和使用索引&lt;/li&gt;
&lt;li&gt;在关键字段的索引上，建与不建索引，查询速度想产近100倍&lt;/li&gt;
&lt;li&gt;差的索引和没有索引效果一样&lt;/li&gt;
&lt;li&gt;索引并非越多越好，因为维护索引需要成本&lt;/li&gt;
&lt;li&gt;每个表的索引应在5个以下，应合理利用部分索引和联合索引&lt;/li&gt;
&lt;li&gt;不再结果集中的结果单一的列上建立索引。比如性别字段只有0和1两种结果集，在这个字段上建索引并不会有太多帮助&lt;/li&gt;
&lt;li&gt;建索引的字段结果集最好分布均匀，或者符合正态分布&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;ndash;摘自&lt;a href=&#34;http://book.douban.com/subject/20370984/&#34;&gt;《PHP核心技术与最佳实践》&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Mysql常见存储引擎的特点和Mysql选择存储引擎的基本原则</title>
      <link>http://rzj.me/blog/2013/03/choose-store-engine-for-mysql.html</link>
      <pubDate>2013-03-20 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;Mysql中常见的三种引擎特点&lt;/p&gt;

&lt;p&gt;MyISAM引擎&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用途: 快读&lt;/li&gt;
&lt;li&gt;锁: 全表锁定&lt;/li&gt;
&lt;li&gt;持久性: 基于表恢复&lt;/li&gt;
&lt;li&gt;事务特性: 不支持&lt;/li&gt;
&lt;li&gt;支持索引类型: B-tree/FullText/R-tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Memory引擎&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用途: 内存数据&lt;/li&gt;
&lt;li&gt;锁: 全表锁定&lt;/li&gt;
&lt;li&gt;持久性: 无磁盘I/O，无可持久性&lt;/li&gt;
&lt;li&gt;事务特性: 不支持&lt;/li&gt;
&lt;li&gt;支持索引类型: Hash/B-tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;InnoDb引擎&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用途: 完整的事务支持&lt;/li&gt;
&lt;li&gt;锁: 多种隔离级别的行锁&lt;/li&gt;
&lt;li&gt;持久性: 基于日志的恢复&lt;/li&gt;
&lt;li&gt;事务特性: 支持&lt;/li&gt;
&lt;li&gt;支持索引类型: Hash/B-tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mysql选择存储引擎的基本原则&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;采用MyISAM引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;R/W&amp;gt;100:1，且update较少&lt;/li&gt;
&lt;li&gt;并发不高，且不需要事务&lt;/li&gt;
&lt;li&gt;表数据量小&lt;/li&gt;
&lt;li&gt;硬件资源有限&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;采用InnoDB引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;R/W较小，频繁更新大字段&lt;/li&gt;
&lt;li&gt;表数据量超过1000万，并发高&lt;/li&gt;
&lt;li&gt;安全性和可靠性要求高&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;采用Memory引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;有足够的内存&lt;/li&gt;
&lt;li&gt;对数据的一致性要求不高，如在线人数和Session等应用&lt;/li&gt;
&lt;li&gt;需要定期归档的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;ndash;摘自&lt;a href=&#34;http://book.douban.com/subject/20370984/&#34;&gt;《PHP核心技术与最佳实践》&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Markdown+Gor+Github，基于Github的免费博客诞生了</title>
      <link>http://rzj.me/blog/2013/03/markdown-gor-github.html</link>
      <pubDate>2013-03-19 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;本博客采用&lt;a href=&#34;http://wowubuntu.com/markdown&#34;&gt;MarkDown&lt;/a&gt;语法格式来写博客，用Golang编写的静态博客引擎&lt;a href=&#34;https://github.com/wendal/gor&#34;&gt;gor&lt;/a&gt;生成静态博客文章，并将网站页面托管于&lt;a href=&#34;https://github.com/&#34;&gt;github&lt;/a&gt; 之上!&lt;/p&gt;

&lt;p&gt;这样的组合写博客简直棒极了&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>